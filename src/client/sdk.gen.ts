// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, formDataBodySerializer, urlSearchParamsBodySerializer } from './client';
import type { NewEventData, NewEventResponses, NewEventErrors, PaginatedAllData, PaginatedAllResponses, PaginatedAllErrors, SearchByPerimeterData, SearchByPerimeterResponses, SearchByPerimeterErrors, SearchByPerimeterCountData, SearchByPerimeterCountResponses, SearchByPerimeterCountErrors, SearchByAddressData, SearchByAddressResponses, SearchByAddressErrors, SearchByAddressCountData, SearchByAddressCountResponses, SearchByAddressCountErrors, GetMultipleEventByIdData, GetMultipleEventByIdResponses, GetMultipleEventByIdErrors, DeleteEventData, DeleteEventResponses, DeleteEventErrors, GetEventByIdData, GetEventByIdResponses, GetEventByIdErrors, UpdateEventData, UpdateEventResponses, UpdateEventErrors, GetEventOrganizerData, GetEventOrganizerResponses, GetEventOrganizerErrors, FetchNotificationsData, FetchNotificationsResponses, FetchNotificationsErrors, AllEventTypesData, AllEventTypesResponses, NewEventTypeData, NewEventTypeResponses, NewEventTypeErrors, GetEventTypeByIdData, GetEventTypeByIdResponses, GetEventTypeByIdErrors, UpdateEventTypeData, UpdateEventTypeResponses, UpdateEventTypeErrors, DeleteEventTypeByIdData, DeleteEventTypeByIdResponses, DeleteEventTypeByIdErrors, GetCreateCountriesData, GetCreateCountriesResponses, GetCreateCountriesErrors, GetSearchCountriesData, GetSearchCountriesResponses, NewSourceData, NewSourceResponses, NewSourceErrors, AllSourcesData, AllSourcesResponses, AllSourcesErrors, SearchSourceData, SearchSourceResponses, SearchSourceErrors, GetSourceByIdData, GetSourceByIdResponses, GetSourceByIdErrors, UpdateSourceData, UpdateSourceResponses, UpdateSourceErrors, GetSourceAdminsByIdData, GetSourceAdminsByIdResponses, GetSourceAdminsByIdErrors, GetSourceContactByIdData, GetSourceContactByIdResponses, GetSourceContactByIdErrors, UpdateSourceAdminData, UpdateSourceAdminResponses, UpdateSourceAdminErrors, AddSourceAdminData, AddSourceAdminResponses, AddSourceAdminErrors, RemoveSourceAdminData, RemoveSourceAdminResponses, RemoveSourceAdminErrors, FutureEventsData, FutureEventsResponses, FutureEventsErrors, PastEventsData, PastEventsResponses, PastEventsErrors, EditableEventsData, EditableEventsResponses, EditableEventsErrors, GetSourceTitleImageData, GetSourceTitleImageResponses, GetSourceTitleImageErrors, UpsertTitleImageData, UpsertTitleImageResponses, UpsertTitleImageErrors, AllSourceTypesData, AllSourceTypesResponses, NewSourceTypeData, NewSourceTypeResponses, NewSourceTypeErrors, GetSourceTypeByIdData, GetSourceTypeByIdResponses, GetSourceTypeByIdErrors, UpdateSourceTypeData, UpdateSourceTypeResponses, UpdateSourceTypeErrors, DeleteSourceTypeByIdData, DeleteSourceTypeByIdResponses, DeleteSourceTypeByIdErrors, AllTopicsData, AllTopicsResponses, NewTopicData, NewTopicResponses, NewTopicErrors, UpdateTopicData, UpdateTopicResponses, UpdateTopicErrors, DeleteTopicByIdData, DeleteTopicByIdResponses, DeleteTopicByIdErrors, GetTopicByIdData, GetTopicByIdResponses, GetTopicByIdErrors, AllInformationData, AllInformationResponses, NewInformationData, NewInformationResponses, NewInformationErrors, GetAvailableCitiesData, GetAvailableCitiesResponses, FindInformationData, FindInformationResponses, FindInformationErrors, DeleteInformationData, DeleteInformationResponses, DeleteInformationErrors, UpdateInformationData, UpdateInformationResponses, UpdateInformationErrors, GetAccessTokenByLoginData, GetAccessTokenByLoginResponses, GetAccessTokenByLoginErrors, GetAccessTokenByTokenData, GetAccessTokenByTokenResponses, ResetPasswordData, ResetPasswordResponses, ResetPasswordErrors, DeleteOwnUserData, DeleteOwnUserResponses, GetOwnUserData, GetOwnUserResponses, UpdateOwnUserData, UpdateOwnUserResponses, UpdateOwnUserErrors, GetOwnSourcesData, GetOwnSourcesResponses, GetAdminIdsData, GetAdminIdsResponses, MakeAdminData, MakeAdminResponses, MakeAdminErrors, GetUserByIdData, GetUserByIdResponses, GetUserByIdErrors, UpdateUserByIdData, UpdateUserByIdResponses, UpdateUserByIdErrors, GetSearchLanguagesData, GetSearchLanguagesResponses, GetAvailableDocumentsData, GetAvailableDocumentsResponses, DeleteDocumentByIdData, DeleteDocumentByIdResponses, DeleteDocumentByIdErrors, GetDocumentByIdData, GetDocumentByIdResponses, GetDocumentByIdErrors, UploadDocumentData, UploadDocumentResponses, UploadDocumentErrors, GetEventAnalysisData, GetEventAnalysisResponses, GetEventAnalysisErrors, ReadApplicationSettingsData, ReadApplicationSettingsResponses, UpdateApplicationSettingsData, UpdateApplicationSettingsResponses, UpdateApplicationSettingsErrors, GetAdminStatisticsData, GetAdminStatisticsResponses, RunCleanupData, RunCleanupResponses, RunCleanupErrors, TrainData, TrainResponses, GetQuickTagEventData, GetQuickTagEventResponses, GetQuickTagEventErrors, QuickTagEventData, QuickTagEventResponses, QuickTagEventErrors, UploadExcelData, UploadExcelResponses, UploadExcelErrors, DumpEventsData, DumpEventsResponses, GetEventIcsData, GetEventIcsResponses, GetEventIcsErrors, GetEventsIcsData, GetEventsIcsResponses, GetEventsIcsErrors, GetRssFeedData, GetRssFeedResponses, GetRssFeedErrors, GetStaticsSitemapData, GetStaticsSitemapResponses, GetSourcesSitemapData, GetSourcesSitemapResponses, GetEventsSitemapIndexData, GetEventsSitemapIndexResponses, GetEventsSitemapData, GetEventsSitemapResponses, GetEventsSitemapErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * New Event
 * Create a new event.
 */
export const newEvent = <ThrowOnError extends boolean = false>(options: Options<NewEventData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<NewEventResponses, NewEventErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/event/new',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Paginated All
 * Get all events for a paginated view.
 */
export const paginatedAll = <ThrowOnError extends boolean = false>(options: Options<PaginatedAllData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PaginatedAllResponses, PaginatedAllErrors, ThrowOnError>({
        url: '/v1/event/all',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Search By Perimeter
 * Search events within a radius around a point.
 */
export const searchByPerimeter = <ThrowOnError extends boolean = false>(options: Options<SearchByPerimeterData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SearchByPerimeterResponses, SearchByPerimeterErrors, ThrowOnError>({
        url: '/v1/event/perimeter-search',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Search By Perimeter Count
 * Get the number of events within a radius around a point.
 */
export const searchByPerimeterCount = <ThrowOnError extends boolean = false>(options: Options<SearchByPerimeterCountData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SearchByPerimeterCountResponses, SearchByPerimeterCountErrors, ThrowOnError>({
        url: '/v1/event/perimeter-search/count',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Search By Address
 * Search events with a certain address.
 */
export const searchByAddress = <ThrowOnError extends boolean = false>(options: Options<SearchByAddressData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SearchByAddressResponses, SearchByAddressErrors, ThrowOnError>({
        url: '/v1/event/address-search',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Search By Address Count
 * Get the number of events with a certain address.
 */
export const searchByAddressCount = <ThrowOnError extends boolean = false>(options: Options<SearchByAddressCountData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SearchByAddressCountResponses, SearchByAddressCountErrors, ThrowOnError>({
        url: '/v1/event/address-search/count',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Multiple Event By Id
 * Get an event by ID.
 */
export const getMultipleEventById = <ThrowOnError extends boolean = false>(options: Options<GetMultipleEventByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GetMultipleEventByIdResponses, GetMultipleEventByIdErrors, ThrowOnError>({
        url: '/v1/event/multi',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Event
 * Delete an event by ID.
 */
export const deleteEvent = <ThrowOnError extends boolean = false>(options: Options<DeleteEventData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteEventResponses, DeleteEventErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/event/{event_id}',
        ...options
    });
};

/**
 * Get Event By Id
 * Get an event by ID.
 */
export const getEventById = <ThrowOnError extends boolean = false>(options: Options<GetEventByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetEventByIdResponses, GetEventByIdErrors, ThrowOnError>({
        url: '/v1/event/{event_id}',
        ...options
    });
};

/**
 * Update Event
 * Update an event by ID.
 */
export const updateEvent = <ThrowOnError extends boolean = false>(options: Options<UpdateEventData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateEventResponses, UpdateEventErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/event/{event_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Event Organizer
 * Get an events organising source.
 */
export const getEventOrganizer = <ThrowOnError extends boolean = false>(options: Options<GetEventOrganizerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetEventOrganizerResponses, GetEventOrganizerErrors, ThrowOnError>({
        url: '/v1/event/{event_id}/organizer',
        ...options
    });
};

/**
 * Fetch Notifications
 * Get a list of notifications to show the user.
 */
export const fetchNotifications = <ThrowOnError extends boolean = false>(options: Options<FetchNotificationsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<FetchNotificationsResponses, FetchNotificationsErrors, ThrowOnError>({
        url: '/v1/event/fetch-notifications',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * All Event Types
 * Get all event types.
 */
export const allEventTypes = <ThrowOnError extends boolean = false>(options?: Options<AllEventTypesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AllEventTypesResponses, unknown, ThrowOnError>({
        url: '/v1/event_type/',
        ...options
    });
};

/**
 * New Event Type
 * Create a new event type.
 */
export const newEventType = <ThrowOnError extends boolean = false>(options: Options<NewEventTypeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<NewEventTypeResponses, NewEventTypeErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/event_type/new',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Event Type By Id
 * Get an event type by ID.
 */
export const getEventTypeById = <ThrowOnError extends boolean = false>(options: Options<GetEventTypeByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetEventTypeByIdResponses, GetEventTypeByIdErrors, ThrowOnError>({
        url: '/v1/event_type/{event_type_id}',
        ...options
    });
};

/**
 * Update Event Type
 * Update an event type by ID.
 */
export const updateEventType = <ThrowOnError extends boolean = false>(options: Options<UpdateEventTypeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateEventTypeResponses, UpdateEventTypeErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/event_type/{event_type_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Event Type By Id
 * Delete an event type by ID.
 */
export const deleteEventTypeById = <ThrowOnError extends boolean = false>(options: Options<DeleteEventTypeByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteEventTypeByIdResponses, DeleteEventTypeByIdErrors, ThrowOnError>({
        url: '/v1/event_type/{type_id}',
        ...options
    });
};

/**
 * Get Create Countries
 * List all countries for which are information can be created.
 */
export const getCreateCountries = <ThrowOnError extends boolean = false>(options?: Options<GetCreateCountriesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetCreateCountriesResponses, GetCreateCountriesErrors, ThrowOnError>({
        url: '/v1/location/available-countries/create',
        ...options
    });
};

/**
 * Get Search Countries
 * List all countries for which are information available.
 */
export const getSearchCountries = <ThrowOnError extends boolean = false>(options?: Options<GetSearchCountriesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetSearchCountriesResponses, unknown, ThrowOnError>({
        url: '/v1/location/available-countries/search',
        ...options
    });
};

/**
 * New Source
 * Create a new source.
 */
export const newSource = <ThrowOnError extends boolean = false>(options: Options<NewSourceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<NewSourceResponses, NewSourceErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/source/new',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * All Sources
 * Get all sources.
 */
export const allSources = <ThrowOnError extends boolean = false>(options?: Options<AllSourcesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AllSourcesResponses, AllSourcesErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/source/',
        ...options
    });
};

/**
 * Search Source
 * Search sources with a certain address.
 */
export const searchSource = <ThrowOnError extends boolean = false>(options: Options<SearchSourceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SearchSourceResponses, SearchSourceErrors, ThrowOnError>({
        url: '/v1/source/address-search',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Source By Id
 * Get an source by ID.
 */
export const getSourceById = <ThrowOnError extends boolean = false>(options: Options<GetSourceByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSourceByIdResponses, GetSourceByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/source/{source_id}',
        ...options
    });
};

/**
 * Update Source
 * Update an sources by ID.
 */
export const updateSource = <ThrowOnError extends boolean = false>(options: Options<UpdateSourceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateSourceResponses, UpdateSourceErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/source/{source_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Source Admins By Id
 * Get all administrators of an source.
 */
export const getSourceAdminsById = <ThrowOnError extends boolean = false>(options: Options<GetSourceAdminsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSourceAdminsByIdResponses, GetSourceAdminsByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/source/{source_id}/admins',
        ...options
    });
};

/**
 * Get Source Contact By Id
 * Get an sources internal contact.
 */
export const getSourceContactById = <ThrowOnError extends boolean = false>(options: Options<GetSourceContactByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSourceContactByIdResponses, GetSourceContactByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/source/{source_id}/internal_contact',
        ...options
    });
};

/**
 * Update Source Admin
 * Update an sources approval status.
 */
export const updateSourceAdmin = <ThrowOnError extends boolean = false>(options: Options<UpdateSourceAdminData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateSourceAdminResponses, UpdateSourceAdminErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/source/{source_id}/approval_status',
        ...options
    });
};

/**
 * Add Source Admin
 * Add an admin to an source.
 */
export const addSourceAdmin = <ThrowOnError extends boolean = false>(options: Options<AddSourceAdminData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<AddSourceAdminResponses, AddSourceAdminErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/source/{source_id}/add_admin',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Remove Source Admin
 * Remove an admin from an source.
 */
export const removeSourceAdmin = <ThrowOnError extends boolean = false>(options: Options<RemoveSourceAdminData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<RemoveSourceAdminResponses, RemoveSourceAdminErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/source/{source_id}/remove_admin/{admin_user_id}',
        ...options
    });
};

/**
 * Future Events
 * Get the 25 next events an source organised.
 */
export const futureEvents = <ThrowOnError extends boolean = false>(options: Options<FutureEventsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FutureEventsResponses, FutureEventsErrors, ThrowOnError>({
        url: '/v1/source/{source_id}/future_events',
        ...options
    });
};

/**
 * Past Events
 * Get the most recent 25 events an source organised.
 */
export const pastEvents = <ThrowOnError extends boolean = false>(options: Options<PastEventsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<PastEventsResponses, PastEventsErrors, ThrowOnError>({
        url: '/v1/source/{source_id}/past_events',
        ...options
    });
};

/**
 * Editable Events
 * Get all editable events.
 */
export const editableEvents = <ThrowOnError extends boolean = false>(options: Options<EditableEventsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<EditableEventsResponses, EditableEventsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/source/{source_id}/editable_events',
        ...options
    });
};

/**
 * Get Source Title Image
 * Get an image by name.
 *
 * Args:
 * source_id: The id of the source to get the title image from.
 * grid_fs_manager: A loaded GridFSManager.
 * session: A loaded PostgreSQLSession.
 *
 * Returns:
 * StreamingResponse: The image from the database.
 */
export const getSourceTitleImage = <ThrowOnError extends boolean = false>(options: Options<GetSourceTitleImageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSourceTitleImageResponses, GetSourceTitleImageErrors, ThrowOnError>({
        url: '/v1/source/{source_id}/title-image',
        ...options
    });
};

/**
 * Upsert Title Image
 * Upload a new image.
 *
 * Args:
 * source_id: The id of the source to upsert the title image from.
 * file_data: The image data.
 * current_active_user: A logged-in user.
 * grid_fs_manager: A loaded GridFSManager.
 * session: A loaded PostgreSQLSession.
 *
 * Returns:
 * dict[str, str]: A dictionary containing the 'image_name'.
 */
export const upsertTitleImage = <ThrowOnError extends boolean = false>(options: Options<UpsertTitleImageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpsertTitleImageResponses, UpsertTitleImageErrors, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/source/{source_id}/title-image',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

/**
 * All Source Types
 * Get all source types.
 */
export const allSourceTypes = <ThrowOnError extends boolean = false>(options?: Options<AllSourceTypesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AllSourceTypesResponses, unknown, ThrowOnError>({
        url: '/v1/source_type/',
        ...options
    });
};

/**
 * New Source Type
 * Create a new source type.
 */
export const newSourceType = <ThrowOnError extends boolean = false>(options: Options<NewSourceTypeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<NewSourceTypeResponses, NewSourceTypeErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/source_type/new',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Source Type By Id
 * Update an source type by ID.
 */
export const getSourceTypeById = <ThrowOnError extends boolean = false>(options: Options<GetSourceTypeByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSourceTypeByIdResponses, GetSourceTypeByIdErrors, ThrowOnError>({
        url: '/v1/source_type/{source_type_id}',
        ...options
    });
};

/**
 * Update Source Type
 * Get an source type by ID.
 */
export const updateSourceType = <ThrowOnError extends boolean = false>(options: Options<UpdateSourceTypeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateSourceTypeResponses, UpdateSourceTypeErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/source_type/{source_type_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Source Type By Id
 * Delete an source type by ID.
 */
export const deleteSourceTypeById = <ThrowOnError extends boolean = false>(options: Options<DeleteSourceTypeByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteSourceTypeByIdResponses, DeleteSourceTypeByIdErrors, ThrowOnError>({
        url: '/v1/source_type/{type_id}',
        ...options
    });
};

/**
 * All Topics
 * Get all topics.
 */
export const allTopics = <ThrowOnError extends boolean = false>(options?: Options<AllTopicsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AllTopicsResponses, unknown, ThrowOnError>({
        url: '/v1/topic/',
        ...options
    });
};

/**
 * New Topic
 * Create a new topic.
 */
export const newTopic = <ThrowOnError extends boolean = false>(options: Options<NewTopicData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<NewTopicResponses, NewTopicErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/topic/new',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update Topic
 * Update a topic by ID.
 */
export const updateTopic = <ThrowOnError extends boolean = false>(options: Options<UpdateTopicData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateTopicResponses, UpdateTopicErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/topic/{event_topic_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Topic By Id
 * Get a topic by ID.
 */
export const deleteTopicById = <ThrowOnError extends boolean = false>(options: Options<DeleteTopicByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteTopicByIdResponses, DeleteTopicByIdErrors, ThrowOnError>({
        url: '/v1/topic/{topic_id}',
        ...options
    });
};

/**
 * Get Topic By Id
 * Get a topic by ID.
 */
export const getTopicById = <ThrowOnError extends boolean = false>(options: Options<GetTopicByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTopicByIdResponses, GetTopicByIdErrors, ThrowOnError>({
        url: '/v1/topic/{topic_id}',
        ...options
    });
};

/**
 * All Information
 * Get all information.
 */
export const allInformation = <ThrowOnError extends boolean = false>(options?: Options<AllInformationData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<AllInformationResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/information/',
        ...options
    });
};

/**
 * New Information
 * Create a new information entry.
 */
export const newInformation = <ThrowOnError extends boolean = false>(options: Options<NewInformationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<NewInformationResponses, NewInformationErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/information/new',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Available Cities
 * Get all available cities for which information are available.
 */
export const getAvailableCities = <ThrowOnError extends boolean = false>(options?: Options<GetAvailableCitiesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAvailableCitiesResponses, unknown, ThrowOnError>({
        url: '/v1/information/available-cities',
        ...options
    });
};

/**
 * Find Information
 * Find information for certain cities or countries.
 */
export const findInformation = <ThrowOnError extends boolean = false>(options: Options<FindInformationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<FindInformationResponses, FindInformationErrors, ThrowOnError>({
        url: '/v1/information/find',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Information
 * Delete an information by ID.
 */
export const deleteInformation = <ThrowOnError extends boolean = false>(options: Options<DeleteInformationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteInformationResponses, DeleteInformationErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/information/{information_id}',
        ...options
    });
};

/**
 * Update Information
 * Update an information by ID.
 */
export const updateInformation = <ThrowOnError extends boolean = false>(options: Options<UpdateInformationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateInformationResponses, UpdateInformationErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/information/{information_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Access Token By Login
 * Retrieve an access token for the API by logging in.
 *
 * Args:
 * form_data: The login form data.
 * config: The applications' configuration.
 * session: The database Session.
 */
export const getAccessTokenByLogin = <ThrowOnError extends boolean = false>(options: Options<GetAccessTokenByLoginData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GetAccessTokenByLoginResponses, GetAccessTokenByLoginErrors, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        url: '/v1/user/get_token',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options.headers
        }
    });
};

/**
 * Get Access Token By Token
 * Retrieve an access token for the API with a currently active token.
 */
export const getAccessTokenByToken = <ThrowOnError extends boolean = false>(options?: Options<GetAccessTokenByTokenData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAccessTokenByTokenResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/user/refresh_token',
        ...options
    });
};

/**
 * Reset Password
 * Reset a user's password.
 */
export const resetPassword = <ThrowOnError extends boolean = false>(options: Options<ResetPasswordData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ResetPasswordResponses, ResetPasswordErrors, ThrowOnError>({
        url: '/v1/user/reset-password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Own User
 * Delete own account.
 */
export const deleteOwnUser = <ThrowOnError extends boolean = false>(options?: Options<DeleteOwnUserData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<DeleteOwnUserResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/user/me',
        ...options
    });
};

/**
 * Get Own User
 * Get own user information.
 */
export const getOwnUser = <ThrowOnError extends boolean = false>(options?: Options<GetOwnUserData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetOwnUserResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/user/me',
        ...options
    });
};

/**
 * Update Own User
 * Update own user data.
 */
export const updateOwnUser = <ThrowOnError extends boolean = false>(options: Options<UpdateOwnUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateOwnUserResponses, UpdateOwnUserErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/user/me',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Own Sources
 * Get own administrated sources.
 */
export const getOwnSources = <ThrowOnError extends boolean = false>(options?: Options<GetOwnSourcesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetOwnSourcesResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/user/me/sources',
        ...options
    });
};

/**
 * Get Admin Ids
 * Get all administrations of the application.
 */
export const getAdminIds = <ThrowOnError extends boolean = false>(options?: Options<GetAdminIdsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAdminIdsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/user/admins',
        ...options
    });
};

/**
 * Make Admin
 * Make a user an application admin.
 */
export const makeAdmin = <ThrowOnError extends boolean = false>(options: Options<MakeAdminData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MakeAdminResponses, MakeAdminErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/user/make_admin',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get User By Id
 * Get a user's data by ID.
 */
export const getUserById = <ThrowOnError extends boolean = false>(options: Options<GetUserByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserByIdResponses, GetUserByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/user/{user_id}',
        ...options
    });
};

/**
 * Update User By Id
 * Update a user's data by ID.
 */
export const updateUserById = <ThrowOnError extends boolean = false>(options: Options<UpdateUserByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateUserByIdResponses, UpdateUserByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/user/{user_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Search Languages
 * List all supported languages.
 */
export const getSearchLanguages = <ThrowOnError extends boolean = false>(options?: Options<GetSearchLanguagesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetSearchLanguagesResponses, unknown, ThrowOnError>({
        url: '/v1/language/available',
        ...options
    });
};

/**
 * Get Available Documents
 * Get all available documents.
 *
 * Returns:
 * dict[str, str]: All names of available documents.
 */
export const getAvailableDocuments = <ThrowOnError extends boolean = false>(options?: Options<GetAvailableDocumentsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAvailableDocumentsResponses, unknown, ThrowOnError>({
        url: '/v1/document/available',
        ...options
    });
};

/**
 * Delete Document By Id
 * Delete a document by file name.
 *
 * Args:
 * document_id: The id of the document.
 * current_active_superuser: A logged-in superuser.
 * grid_fs_manager: A loaded GridFSManager.
 * session: A loaded PostgreSQLSession.
 *
 * Returns:
 * str: If the request was successful
 */
export const deleteDocumentById = <ThrowOnError extends boolean = false>(options: Options<DeleteDocumentByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteDocumentByIdResponses, DeleteDocumentByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/document/{document_id}',
        ...options
    });
};

/**
 * Get Document By Id
 * Get a document by file name.
 *
 * Args:
 * document_id: The id of the document.
 * grid_fs_manager: A loaded GridFSManager.
 * session: A loaded PostgreSQLSession.
 *
 * Returns:
 * StreamingResponse: The document from the database.
 */
export const getDocumentById = <ThrowOnError extends boolean = false>(options: Options<GetDocumentByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetDocumentByIdResponses, GetDocumentByIdErrors, ThrowOnError>({
        url: '/v1/document/{document_id}',
        ...options
    });
};

/**
 * Upload Document
 * Upload a new document.
 *
 * Args:
 * language: The language of the file.
 * document_type: The type of the document (e.g. financial report)
 * file_data: The document data.
 * current_active_superuser: A logged-in superuser.
 * display_name: The name to show in the UI.
 * grid_fs_manager: A loaded GridFSManager.
 * session: A loaded PostgreSQLSession.
 *
 * Returns:
 * str: A status response
 */
export const uploadDocument = <ThrowOnError extends boolean = false>(options: Options<UploadDocumentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UploadDocumentResponses, UploadDocumentErrors, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/document/upload',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

/**
 * Get Event Analysis
 * Get event data for densitymaps.
 */
export const getEventAnalysis = <ThrowOnError extends boolean = false>(options: Options<GetEventAnalysisData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GetEventAnalysisResponses, GetEventAnalysisErrors, ThrowOnError>({
        url: '/v1/analysis/event',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Read Application Settings
 * Read the current application settings.
 */
export const readApplicationSettings = <ThrowOnError extends boolean = false>(options?: Options<ReadApplicationSettingsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ReadApplicationSettingsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/admin/settings/application',
        ...options
    });
};

/**
 * Update Application Settings
 * Update the current application settings.
 */
export const updateApplicationSettings = <ThrowOnError extends boolean = false>(options: Options<UpdateApplicationSettingsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateApplicationSettingsResponses, UpdateApplicationSettingsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/admin/settings/application',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Admin Statistics
 * Get statistics for the admin.
 */
export const getAdminStatistics = <ThrowOnError extends boolean = false>(options?: Options<GetAdminStatisticsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<GetAdminStatisticsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/admin/statistics',
        ...options
    });
};

/**
 * Run Cleanup
 * Perform cleanup tasks.
 */
export const runCleanup = <ThrowOnError extends boolean = false>(options: Options<RunCleanupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RunCleanupResponses, RunCleanupErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/admin/cleanup',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Train
 * Perform cleanup tasks.
 */
export const train = <ThrowOnError extends boolean = false>(options?: Options<TrainData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<TrainResponses, unknown, ThrowOnError>({
        url: '/v1/admin/train',
        ...options
    });
};

/**
 * Get Quick Tag Event
 * Get an Event for quick tagging.
 */
export const getQuickTagEvent = <ThrowOnError extends boolean = false>(options: Options<GetQuickTagEventData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GetQuickTagEventResponses, GetQuickTagEventErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/admin/quick-tag/get',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Quick Tag Event
 * Get an Event for quick tagging.
 */
export const quickTagEvent = <ThrowOnError extends boolean = false>(options: Options<QuickTagEventData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<QuickTagEventResponses, QuickTagEventErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/admin/quick-tag/set',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Upload Excel
 * Upload excel data.
 *
 * Time format is Python formatting. (https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior)
 */
export const uploadExcel = <ThrowOnError extends boolean = false>(options: Options<UploadExcelData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UploadExcelResponses, UploadExcelErrors, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/admin/upload-excel',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

/**
 * Dump Events
 * Upload excel data.
 *
 * Time format is Python formatting. (https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior)
 */
export const dumpEvents = <ThrowOnError extends boolean = false>(options?: Options<DumpEventsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<DumpEventsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/admin/event-dump',
        ...options
    });
};

/**
 * Get Event Ics
 * Get calendar export for specific event.
 */
export const getEventIcs = <ThrowOnError extends boolean = false>(options: Options<GetEventIcsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetEventIcsResponses, GetEventIcsErrors, ThrowOnError>({
        url: '/v1/export/ics/event.ics',
        ...options
    });
};

/**
 * Get Events Ics
 * Get calendar export by query.
 */
export const getEventsIcs = <ThrowOnError extends boolean = false>(options?: Options<GetEventsIcsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetEventsIcsResponses, GetEventsIcsErrors, ThrowOnError>({
        url: '/v1/export/ics/events.ics',
        ...options
    });
};

/**
 * Get Rss Feed
 * Get rss feed export by query.
 */
export const getRssFeed = <ThrowOnError extends boolean = false>(options: Options<GetRssFeedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetRssFeedResponses, GetRssFeedErrors, ThrowOnError>({
        url: '/v1/export/rss/feed',
        ...options
    });
};

/**
 * Get Statics Sitemap
 * Get the sitemap index.
 */
export const getStaticsSitemap = <ThrowOnError extends boolean = false>(options?: Options<GetStaticsSitemapData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetStaticsSitemapResponses, unknown, ThrowOnError>({
        url: '/v1/sitemaps/statics/index.xml',
        ...options
    });
};

/**
 * Get Sources Sitemap
 * Get the sources sitemap.
 */
export const getSourcesSitemap = <ThrowOnError extends boolean = false>(options?: Options<GetSourcesSitemapData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetSourcesSitemapResponses, unknown, ThrowOnError>({
        url: '/v1/sitemaps/sources/index.xml',
        ...options
    });
};

/**
 * Get Events Sitemap Index
 * Get the sitemap index.
 */
export const getEventsSitemapIndex = <ThrowOnError extends boolean = false>(options?: Options<GetEventsSitemapIndexData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetEventsSitemapIndexResponses, unknown, ThrowOnError>({
        url: '/v1/sitemaps/events/index.xml',
        ...options
    });
};

/**
 * Get Events Sitemap
 * Get the events sitemap.
 */
export const getEventsSitemap = <ThrowOnError extends boolean = false>(options: Options<GetEventsSitemapData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetEventsSitemapResponses, GetEventsSitemapErrors, ThrowOnError>({
        url: '/v1/sitemaps/events/{language}/{index}.xml.gz',
        ...options
    });
};